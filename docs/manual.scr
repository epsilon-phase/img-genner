@begin(section)
@title(Package docs)
@begin(section)
@title(Introduction)

@c(Img-genner) is a package for very basic drawing in common lisp. It does not
support vectors, beziers, or any other such (useful) contrivances as of yet, and
as of now, only allows for @c(png) output.

There are a few departures from standard conventions that are probably worthwhile to note:
@begin(list)
@item(Coordinates are such that higher positions in images are placed "higher" in the image, so that in the example @ref[id=#image-example](below), X is at the coordinate @c(5,5))
@item(All @c(point) structures are single-floats, instead of integers or anything of the like.)
@item(The @c(get-intersection) function does not provide accurate reporting for co-linear lines)
@end(list)
@begin[ref=image-example](code)
5         X
4
3
2
1
0 1 2 3 4 5
@end(code)
@end(section)
@cl:with-package[name="img-genner"](
  @cl:doc(class shape)
  @cl:doc(class rectangle)
  @cl:doc(class ellipse)
)
  @begin(section)
    @title(Point Generation/Manipulation)
      @begin(section)@title(Point convenience)
      @cl:with-package[name="img-genner"](
        @cl:doc(function point)
        @cl:doc(function incf-point)
        @cl:doc(function decf-point)
        @cl:doc(function add-point)
        @cl:doc(function sub-point)
      )
      @end(section)
      @begin(section)
      @title(Shape Manipulation)
        @cl:with-package[name="img-genner"](
              @cl:doc(generic get-points)
              @cl:doc(method get-points (s shape) &key (max-degree 10))
              @cl:doc(method get-points (shape rectangle) &key (max-degree 4))
              @cl:doc(method get-points (shape ellipse) &key (max-degree 10))
              @cl:doc(function rotate-around)
        )
      @end(section)
  @end(section)
  @begin(section)
    @title(Colors)
    Colors have a number of representations. The first and most important is as a @c((simple-array (unsigned-byte 8) (3))), but
    many functions will work properly on 4 sample color pictures.
    
    @cl:with-package[name="img-genner"](
      @cl:doc(function rgb)
      @cl:doc(function get-random-color)
      @cl:doc(function get-color)
    )
  @end(section)
  @begin(section)
    @title(Pixel Manipulation)
    @cl:with-package[name="img-genner"](
      @cl:doc(function set-pixel)
      @cl:doc(function get-pixel)
      @cl:doc(function swap-pixel))
    @begin(section)
      @title(Drawing)
      @cl:with-package[name="img-genner"](
      @cl:doc(function stroke-line)
      @cl:doc(generic fill-shape)
      @cl:doc(method fill-shape (shape ellipse) image stroker)
      @cl:doc(method fill-shape (shape rectangle) image stroker)
      @cl:doc(method fill-shape (shape polygon) image stroker)
      @cl:doc(generic stroke-shape)
      )
    @end(section)
    @begin(section)
      @title(Strokers)
      Strokers are what most frameworks call brushes, as such there are a number of different options
      @cl:with-package[name="img-genner"](
        @cl:doc(function static-color-stroker)
        @cl:doc(function gradient-color-stroker)
        @cl:doc(function radial-gradient-stroker)
      )
    @end(section)
  @end(section)
  @begin(section)
      @title(Triangularization)
      @cl:with-package[name="img-genner/triangularization"](
        @cl:doc(function earclip))
  @begin[lang="lisp"](code)
  CL-USER>(img-genner/triangularization:earclip
            (map 'list #'img-genner:point '(0.0 200.0 200.0 100.0 0.0)
                                          '(0.0 0.0 175.0 200.0 200.0)))
  =>((#(0.0 200.0) #(100.0 200.0) #(200.0 0.0))
     (#(100.0 200.0) #(200.0 175.0) #(200.0 0.0))
     (#(200.0 0.0) #(0.0 0.0) #(0.0 200.0)))
  @end(code)
   @cl:with-package[name="img-genner/triangularization"](
    @cl:doc(function fan-triangulate)
   )
  @end(section)
@end(section)
