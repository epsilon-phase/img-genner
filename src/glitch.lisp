(in-package :img-genner)

(defun compare-colors-bytewise(c1 c2)
;  (declare (type (vector (unsigned-byte 8) 3) c1 c2))
  (loop for a across c1
        for b across c2
        until (not (= a b))
        finally (return (< a b)))
  )
(defun compare-colors-magnitude(c1 c2)
;  (declare (type (vector unsigned-byte *) c1 c2))
  (< (reduce #'+ c1) (reduce #'+ c2))
  )
(defun sort-along-line(image line &optional (comparison #'compare-colors-bytewise))
  (let ((comb-length (length line))
        (sorted nil)
        (shrink 1.3))
    (loop for gap = comb-length then (floor gap shrink)
          when (<= gap 1)
            do(setf gap 1
                    sorted t)
          do(loop for i = 0 then (1+ i)
                  for j = (+ i gap) then (1+ j)
                  while (< (+ i gap) comb-length)
                  for (ax . ay) = (aref line i) then (aref line i)
                  for (bx . by) = (aref line j) then (aref line j)
                  when (funcall comparison (get-pixel image ax ay) (get-pixel image bx by))
                    do(progn (swap-pixel image ax ay bx by)
                             (setf sorted nil))
                  )
          while (not sorted)
          )
    )

  )
(export '(compare-colors-bytewise sort-along-line compare-colors-magnitude))
